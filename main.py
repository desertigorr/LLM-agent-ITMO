import requests
import xml.etree.ElementTree as ET
import os
from fastapi import FastAPI
from pydantic import BaseModel


LLM_API_KEY = os.getenv("DEEPSEEK_API_KEY")
API_KEY = os.getenv("API_KEY")
FOLDER_ID = os.getenv("FOLDER_ID")

app = FastAPI()

class SearchRequest(BaseModel):
    query: str

def search_yandex(query):
    url = f"https://yandex.ru/search/xml?folderid={FOLDER_ID}&apikey={API_KEY}&query={query}"

    params = {
        "text": query,
        "lang": "ru",
        "type": "web",
        "limit": 3,
    }

    headers = {
        'Content-Type': 'application/x-www-form-urlencoded',
        'User-Agent': 'Mozilla/5.0'
    }

    try:
        response = requests.get(url, params=params, headers=headers, timeout=3)
        response.raise_for_status()

        # –î–µ–±–∞–≥: –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç Yandex
        print("üì° –ü–æ–ª—É—á–µ–Ω–Ω—ã–π XML –æ—Ç–≤–µ—Ç:")
        print(response.text)
        print("-" * 50)

        root = ET.fromstring(response.text)
        results = []

        # –î–µ–±–∞–≥: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ —Ç–µ–≥–∏ –µ—Å—Ç—å –≤ XML
        print("üîé –í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏ –≤ XML:")
        for child in root.iter():
            print(f"–ù–∞–π–¥–µ–Ω —Ç–µ–≥: {child.tag}")

        # –î–µ–±–∞–≥: –ò—â–µ–º –≤ XML –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        docs = root.findall('.//doc')
        if not docs:
            print("‚ùå –í–Ω–∏–º–∞–Ω–∏–µ! –í XML –Ω–µ—Ç —Ç–µ–≥–∞ <doc>. –ü–æ–ø—Ä–æ–±—É–π –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫!")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        for doc in docs:
            title = doc.find('title').text if doc.find('title') is not None else '–ù–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞'
            url = doc.find('url').text if doc.find('url') is not None else '–ù–µ—Ç URL'
            extended_text = doc.find('.//extended-text')
            snippet = extended_text.text if extended_text is not None else '–ù–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è'
            
            results.append({
                "title": title,
                "url": url,
                "snippet": snippet
            })

        return results  # ‚úÖ –¢–µ–ø–µ—Ä—å API –ø–æ–ª—É—á–∏—Ç –¥–∞–Ω–Ω—ã–µ

    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return []
    except ET.ParseError as e:
        print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ XML: {e}")
        return []
    except Exception as e:
        print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return []

@app.post("/search")
def search_api(request: SearchRequest):
    results = search_yandex(request.query)
    return {"query": request.query, "results": results}
